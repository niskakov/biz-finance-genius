import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from datetime import datetime, timedelta
import os
import json
import hashlib
import uuid
from pathlib import Path

# Set page config
st.set_page_config(
    page_title="Financial Dashboard",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Create data directory if it doesn't exist
DATA_DIR = Path("user_data")
DATA_DIR.mkdir(exist_ok=True)

# User authentication functions
def get_user_hash(username, password):
    """Create a hash for the user's password."""
    return hashlib.sha256(f"{username}:{password}".encode()).hexdigest()

def save_user(username, password_hash):
    """Save a new user to the users database."""
    users_file = DATA_DIR / "users.json"
    if users_file.exists():
        with open(users_file, "r") as f:
            users = json.load(f)
    else:
        users = {}
    
    users[username] = password_hash
    with open(users_file, "w") as f:
        json.dump(users, f)

def verify_user(username, password_hash):
    """Check if the user exists and the password is correct."""
    users_file = DATA_DIR / "users.json"
    if not users_file.exists():
        return False
    
    with open(users_file, "r") as f:
        users = json.load(f)
    
    return username in users and users[username] == password_hash

def get_user_data_path(user_id):
    """Get the path to the user's data directory."""
    user_data_dir = DATA_DIR / user_id
    user_data_dir.mkdir(exist_ok=True)
    return user_data_dir

# Initialize session state
if 'user_id' not in st.session_state:
    st.session_state['user_id'] = None

if 'uploaded_data' not in st.session_state:
    st.session_state['uploaded_data'] = None

if 'analysis_results' not in st.session_state:
    st.session_state['analysis_results'] = {}

if 'page' not in st.session_state:
    st.session_state['page'] = "Login"

# Login/Register page
def show_login_page():
    st.title("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.header("–í—Ö–æ–¥")
        login_username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="login_username")
        login_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="login_password")
        login_button = st.button("–í–æ–π—Ç–∏")
        
        if login_button:
            password_hash = get_user_hash(login_username, login_password)
            if verify_user(login_username, password_hash):
                st.session_state['user_id'] = login_username
                st.session_state['page'] = "Dashboard"
                st.experimental_rerun()
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    
    with col2:
        st.header("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        register_username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="register_username")
        register_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="register_password")
        confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
        register_button = st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        
        if register_button:
            if register_password != confirm_password:
                st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            elif len(register_username) < 3:
                st.error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                users_file = DATA_DIR / "users.json"
                if users_file.exists():
                    with open(users_file, "r") as f:
                        users = json.load(f)
                    if register_username in users:
                        st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        return
                
                password_hash = get_user_hash(register_username, register_password)
                save_user(register_username, password_hash)
                st.success("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")

# Functions for data generation (in a real app, you'd fetch from an API or database)
def generate_financial_data(start_date, periods=12):
    dates = pd.date_range(start=start_date, periods=periods, freq='M')
    
    # Generate sample financial data
    revenue = np.random.uniform(80000, 120000, size=periods) + np.linspace(0, 20000, periods)
    costs = np.random.uniform(50000, 80000, size=periods) + np.linspace(0, 10000, periods)
    profit = revenue - costs
    
    df = pd.DataFrame({
        'Date': dates,
        'Revenue': revenue,
        'Costs': costs,
        'Profit': profit
    })
    
    return df

def generate_unit_economics(product_count=5):
    products = [f"Product {chr(65+i)}" for i in range(product_count)]
    
    price = np.random.uniform(50, 200, size=product_count)
    cost = price * np.random.uniform(0.4, 0.7, size=product_count)
    margin = price - cost
    margin_pct = (margin / price) * 100
    volume = np.random.randint(100, 5000, size=product_count)
    
    df = pd.DataFrame({
        'Product': products,
        'Price': price,
        'Cost': cost,
        'Margin': margin,
        'Margin %': margin_pct,
        'Volume': volume,
        'Total Revenue': price * volume,
        'Total Cost': cost * volume,
        'Total Profit': margin * volume
    })
    
    return df

def generate_scenarios(base_revenue=100000, scenario_count=3):
    scenarios = ["Conservative", "Base Case", "Optimistic"][:scenario_count]
    
    growth_rates = {
        "Conservative": np.random.uniform(0.01, 0.05, size=12),
        "Base Case": np.random.uniform(0.03, 0.08, size=12),
        "Optimistic": np.random.uniform(0.05, 0.12, size=12)
    }
    
    start_date = datetime.now().replace(day=1)
    dates = pd.date_range(start=start_date, periods=12, freq='M')
    
    results = {}
    for scenario in scenarios:
        revenue = [base_revenue]
        for i in range(11):
            revenue.append(revenue[-1] * (1 + growth_rates[scenario][i]))
        
        results[scenario] = revenue
    
    df = pd.DataFrame(results, index=dates)
    df.index.name = 'Date'
    
    return df.reset_index()

# AI Analysis functions
def analyze_financial_data(df):
    """Perform AI analysis on financial data."""
    analysis = {}
    
    # Overall trend analysis
    revenue_trend = "—Ä–∞—Å—Ç–µ—Ç" if df["Revenue"].iloc[-1] > df["Revenue"].iloc[0] else "–ø–∞–¥–∞–µ—Ç"
    costs_trend = "—Ä–∞—Å—Ç—É—Ç" if df["Costs"].iloc[-1] > df["Costs"].iloc[0] else "–ø–∞–¥–∞—é—Ç"
    profit_trend = "—Ä–∞—Å—Ç–µ—Ç" if df["Profit"].iloc[-1] > df["Profit"].iloc[0] else "–ø–∞–¥–∞–µ—Ç"
    
    # Calculate growth rates
    revenue_growth = (df["Revenue"].iloc[-1] / df["Revenue"].iloc[0] - 1) * 100
    costs_growth = (df["Costs"].iloc[-1] / df["Costs"].iloc[0] - 1) * 100
    profit_growth = (df["Profit"].iloc[-1] / df["Profit"].iloc[0] - 1) * 100
    
    # Calculate average margin
    df["Margin %"] = (df["Profit"] / df["Revenue"]) * 100
    avg_margin = df["Margin %"].mean()
    
    # Find most profitable month
    most_profitable_month = df.loc[df["Profit"].idxmax()]
    
    analysis["summary"] = f"""
    ## –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:
    
    –ó–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥ –≤—ã—Ä—É—á–∫–∞ **{revenue_trend}** –Ω–∞ **{revenue_growth:.1f}%**, 
    –∑–∞—Ç—Ä–∞—Ç—ã **{costs_trend}** –Ω–∞ **{costs_growth:.1f}%**, 
    –ø—Ä–∏–±—ã–ª—å **{profit_trend}** –Ω–∞ **{profit_growth:.1f}%**.
    
    –°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **{avg_margin:.1f}%**.
    
    –°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –º–µ—Å—è—Ü - **{most_profitable_month['Date'].strftime('%B %Y')}** 
    —Å –≤—ã—Ä—É—á–∫–æ–π **{most_profitable_month['Revenue']:,.0f}** –∏ –ø—Ä–∏–±—ã–ª—å—é **{most_profitable_month['Profit']:,.0f}**.
    """
    
    # Seasonality analysis
    if len(df) >= 6:
        summer_months = df[df["Date"].dt.month.isin([6, 7, 8])]
        winter_months = df[df["Date"].dt.month.isin([12, 1, 2])]
        
        if not summer_months.empty and not winter_months.empty:
            summer_avg = summer_months["Revenue"].mean()
            winter_avg = winter_months["Revenue"].mean()
            
            if summer_avg > winter_avg * 1.1:
                season_effect = "–ó–∞–º–µ—Ç–Ω–∞ –ª–µ—Ç–Ω—è—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: –≤—ã—Ä—É—á–∫–∞ –≤ –ª–µ—Ç–Ω–∏–µ –º–µ—Å—è—Ü—ã –≤—ã—à–µ."
            elif winter_avg > summer_avg * 1.1:
                season_effect = "–ó–∞–º–µ—Ç–Ω–∞ –∑–∏–º–Ω—è—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: –≤—ã—Ä—É—á–∫–∞ –≤ –∑–∏–º–Ω–∏–µ –º–µ—Å—è—Ü—ã –≤—ã—à–µ."
            else:
                season_effect = "–Ø–≤–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –Ω–µ –≤—ã—è–≤–ª–µ–Ω–∞."
                
            analysis["seasonality"] = f"""
            ## –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏:
            
            {season_effect}
            –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –∑–∞ –ª–µ—Ç–Ω–∏–µ –º–µ—Å—è—Ü—ã: **{summer_avg:,.0f}**
            –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –∑–∞ –∑–∏–º–Ω–∏–µ –º–µ—Å—è—Ü—ã: **{winter_avg:,.0f}**
            """
    
    # Recommendations
    recommendations = []
    
    if costs_growth > revenue_growth:
        recommendations.append("–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–æ—Å—Ç –∑–∞—Ç—Ä–∞—Ç. –¢–µ–º–ø —Ä–æ—Å—Ç–∞ –∑–∞—Ç—Ä–∞—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç–µ–º–ø —Ä–æ—Å—Ç–∞ –≤—ã—Ä—É—á–∫–∏, —á—Ç–æ –º–æ–∂–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ —Å–∫–∞–∑–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–±—ã–ª–∏ –≤ –±—É–¥—É—â–µ–º.")
    
    if avg_margin < 15:
        recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–≤—ã—à–µ–Ω–∏—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞, —Ç–µ–∫—É—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ —Ä—ã–Ω–∫—É.")
    
    if any(df["Profit"] < 0):
        loss_months = df[df["Profit"] < 0]["Date"].dt.strftime("%B %Y").tolist()
        loss_months_str = ", ".join(loss_months)
        recommendations.append(f"–í—ã—è–≤–ª–µ–Ω—ã —É–±—ã—Ç–æ—á–Ω—ã–µ –º–µ—Å—è—Ü—ã: {loss_months_str}. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –º–µ—Ä—ã –ø–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—é —É–±—ã—Ç–∫–æ–≤.")
    
    analysis["recommendations"] = f"""
    ## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
    
    {"".join(f"- {r}\n" for r in recommendations) if recommendations else "- –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Å–æ–±—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç. –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ."}
    """
    
    return analysis

def analyze_unit_economics(df):
    """Perform AI analysis on unit economics data."""
    analysis = {}
    
    # Find best and worst products by margin
    best_margin_product = df.loc[df["Margin %"].idxmax()]
    worst_margin_product = df.loc[df["Margin %"].idxmin()]
    
    # Find best and worst products by total profit
    best_profit_product = df.loc[df["Total Profit"].idxmax()]
    worst_profit_product = df.loc[df["Total Profit"].idxmin()]
    
    # Calculate average metrics
    avg_price = df["Price"].mean()
    avg_margin_pct = df["Margin %"].mean()
    
    analysis["summary"] = f"""
    ## –ê–Ω–∞–ª–∏–∑ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏:
    
    –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **{avg_price:.2f}**, –ø—Ä–∏ —Å—Ä–µ–¥–Ω–µ–π –º–∞—Ä–∂–µ **{avg_margin_pct:.1f}%**.
    
    –üÔøΩÔøΩ–æ–¥—É–∫—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é - **{best_margin_product['Product']}** (**{best_margin_product['Margin %']:.1f}%**).
    –ü—Ä–æ–¥—É–∫—Ç —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é - **{worst_margin_product['Product']}** (**{worst_margin_product['Margin %']:.1f}%**).
    
    –°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç - **{best_profit_product['Product']}** —Å –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª—å—é **{best_profit_product['Total Profit']:,.0f}**.
    –ù–∞–∏–º–µ–Ω–µ–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç - **{worst_profit_product['Product']}** —Å –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª—å—é **{worst_profit_product['Total Profit']:,.0f}**.
    """
    
    # Recommendations
    recommendations = []
    
    low_margin_products = df[df["Margin %"] < 20]["Product"].tolist()
    if low_margin_products:
        low_margin_str = ", ".join(low_margin_products)
        recommendations.append(f"–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏—è —Ü–µ–Ω –∏–ª–∏ —Å–Ω–∏–∂–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –Ω–∏–∑–∫–æ–π –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é: {low_margin_str}")
    
    low_volume_high_margin = df[(df["Margin %"] > df["Margin %"].mean()) & (df["Volume"] < df["Volume"].mean())]["Product"].tolist()
    if low_volume_high_margin:
        products_str = ", ".join(low_volume_high_margin)
        recommendations.append(f"–£–≤–µ–ª–∏—á—å—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —É—Å–∏–ª–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –º–∞—Ä–∂–æ–π, –Ω–æ –Ω–∏–∑–∫–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏: {products_str}")
    
    analysis["recommendations"] = f"""
    ## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏:
    
    {"".join(f"- {r}\n" for r in recommendations) if recommendations else "- –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Å–æ–±—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç. –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ."}
    """
    
    return analysis

def analyze_forecasts(df):
    """Perform AI analysis on forecast scenarios data."""
    analysis = {}
    
    # Calculate growth for each scenario
    first_month = {scenario: df[scenario].iloc[0] for scenario in ["Conservative", "Base Case", "Optimistic"] if scenario in df.columns}
    last_month = {scenario: df[scenario].iloc[-1] for scenario in ["Conservative", "Base Case", "Optimistic"] if scenario in df.columns}
    
    growth = {scenario: (last_month[scenario] / first_month[scenario] - 1) * 100 for scenario in first_month.keys()}
    
    # Calculate average monthly growth rates
    monthly_growth = {}
    for scenario in ["Conservative", "Base Case", "Optimistic"]:
        if scenario in df.columns:
            monthly_changes = [df[scenario].iloc[i+1] / df[scenario].iloc[i] - 1 for i in range(len(df) - 1)]
            monthly_growth[scenario] = sum(monthly_changes) / len(monthly_changes) * 100
    
    analysis["summary"] = f"""
    ## –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:
    
    –ó–∞ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ 12 –º–µ—Å—è—Ü–µ–≤ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏:
    - –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: **{growth.get('Conservative', 0):.1f}%** (—Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–π —Ä–æ—Å—Ç: **{monthly_growth.get('Conservative', 0):.2f}%**)
    - –ë–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: **{growth.get('Base Case', 0):.1f}%** (—Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–π —Ä–æ—Å—Ç: **{monthly_growth.get('Base Case', 0):.2f}%**)
    - –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: **{growth.get('Optimistic', 0):.1f}%** (—Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–π —Ä–æ—Å—Ç: **{monthly_growth.get('Optimistic', 0):.2f}%**)
    
    –ö –∫–æ–Ω—Ü—É –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–º –∏ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–º —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **{(last_month.get('Optimistic', 0) / last_month.get('Conservative', 1) - 1) * 100:.1f}%**.
    """
    
    # Recommendations based on forecasts
    recommendations = []
    
    base_case_growth = growth.get('Base Case', 0)
    if base_case_growth < 10:
        recommendations.append("–ë–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–æ—Å—Ç–∞ –¥–æ–≤–æ–ª—å–Ω–æ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞.")
    elif base_case_growth > 50:
        recommendations.append("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ —Ç–µ–º–ø—ã —Ä–æ—Å—Ç–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–∫–∏–º —Ä–æ—Å—Ç–æ–º.")
    
    risk_gap = (last_month.get('Optimistic', 0) - last_month.get('Conservative', 0)) / last_month.get('Base Case', 1) * 100
    if risk_gap > 40:
        recommendations.append(f"–ë–æ–ª—å—à–æ–π —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ ({risk_gap:.1f}%) —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—ã—Å–æ–∫—É—é –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
    
    analysis["recommendations"] = f"""
    ## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:
    
    {"".join(f"- {r}\n" for r in recommendations) if recommendations else "- –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –æ—Å–æ–±—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç. –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ."}
    """
    
    return analysis

# Function to handle file upload and save to user's directory
def handle_file_upload():
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (CSV, Excel)", type=["csv", "xlsx", "xls"])
    
    if uploaded_file is not None:
        try:
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
            else:
                df = pd.read_excel(uploaded_file)
                
            st.session_state['uploaded_data'] = df
            
            # Save to user directory
            user_dir = get_user_data_path(st.session_state['user_id'])
            file_path = user_dir / f"data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            df.to_csv(file_path, index=False)
            
            st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            return df
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    
    return None

# Function to load user's saved data files
def load_user_data():
    user_dir = get_user_data_path(st.session_state['user_id'])
    data_files = list(user_dir.glob("*.csv"))
    
    if not data_files:
        return None
    
    file_options = [f.name for f in data_files]
    selected_file = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:", file_options)
    
    if selected_file:
        file_path = user_dir / selected_file
        df = pd.read_csv(file_path)
        st.session_state['uploaded_data'] = df
        return df
    
    return None

# Main app logic
if st.session_state['page'] == "Login" or st.session_state['user_id'] is None:
    show_login_page()
else:
    # Sidebar for navigation and user info
    st.sidebar.title(f"–ü—Ä–∏–≤–µ—Ç, {st.session_state['user_id']}!")
    if st.sidebar.button("–í—ã–π—Ç–∏"):
        st.session_state['user_id'] = None
        st.session_state['page'] = "Login"
        st.experimental_rerun()
    
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", ["–î–∞—à–±–æ—Ä–¥", "–ü—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–∏", "–Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–ü—Ä–æ–≥–Ω–æ–∑—ã"])
    
    # Sidebar filters
    st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")
    date_range = st.sidebar.date_input(
        "–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥",
        value=(datetime.now() - timedelta(days=365), datetime.now())
    )
    
    currency = st.sidebar.selectbox("–í–∞–ª—é—Ç–∞", ["‚Ç∏", "USD", "EUR"])
    
    # Data source: upload new or use saved
    st.sidebar.title("–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö")
    data_source = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", ["–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä"])
    
    # Handle data source selection
    if data_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª":
        uploaded_data = handle_file_upload()
        if uploaded_data is not None:
            st.session_state['uploaded_data'] = uploaded_data
    elif data_source == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ":
        saved_data = load_user_data()
        if saved_data is not None:
            st.session_state['uploaded_data'] = saved_data
    else:  # Generate sample data
        # Use existing sample data generation functions
        financial_data = generate_financial_data(start_date=date_range[0])
        unit_data = generate_unit_economics()
        scenario_data = generate_scenarios()
    
    # Main content based on selected page
    if page == "–î–∞—à–±–æ—Ä–¥":
        st.title("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥")
        
        # Sample data or user data
        if st.session_state['uploaded_data'] is not None and 'Revenue' in st.session_state['uploaded_data'].columns:
            financial_data = st.session_state['uploaded_data']
            st.success("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        else:
            financial_data = generate_financial_data(start_date=date_range[0])
            st.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        # Key metrics
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric(label="–í—ã—Ä—É—á–∫–∞", value=f"{financial_data['Revenue'].sum():,.0f} {currency}", delta=f"{(financial_data['Revenue'].iloc[-1]/financial_data['Revenue'].iloc[0]-1)*100:.1f}%")
        with col2:
            st.metric(label="–†–∞—Å—Ö–æ–¥—ã", value=f"{financial_data['Costs'].sum():,.0f} {currency}", delta=f"{(financial_data['Costs'].iloc[-1]/financial_data['Costs'].iloc[0]-1)*100:.1f}%")
        with col3:
            st.metric(label="–ü—Ä–∏–±—ã–ª—å", value=f"{financial_data['Profit'].sum():,.0f} {currency}", delta=f"{(financial_data['Profit'].iloc[-1]/financial_data['Profit'].iloc[0]-1)*100:.1f}%")
        with col4:
            margin = (financial_data['Profit'].sum() / financial_data['Revenue'].sum()) * 100
            st.metric(label="–ú–∞—Ä–∂–∞", value=f"{margin:.1f}%", delta=f"{((financial_data['Profit'].iloc[-1]/financial_data['Revenue'].iloc[-1])-(financial_data['Profit'].iloc[0]/financial_data['Revenue'].iloc[0]))*100:.1f} –ø.–ø.")
        
        # Charts
        st.subheader("–í—ã—Ä—É—á–∫–∞ –∏ —Ä–∞—Å—Ö–æ–¥—ã")
        fig = px.line(
            financial_data,
            x="Date",
            y=["Revenue", "Costs", "Profit"],
            title="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # AI Analysis
        st.subheader("–ò–ò-–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –ò–ò-–∞–Ω–∞–ª–∏–∑"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ..."):
                analysis = analyze_financial_data(financial_data)
                st.session_state['analysis_results']['financial'] = analysis
        
        if 'financial' in st.session_state['analysis_results']:
            st.markdown(st.session_state['analysis_results']['financial']['summary'])
            if 'seasonality' in st.session_state['analysis_results']['financial']:
                st.markdown(st.session_state['analysis_results']['financial']['seasonality'])
            st.markdown(st.session_state['analysis_results']['financial']['recommendations'])
    
    elif page == "–ü—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–∏":
        st.title("–û—Ç—á–µ—Ç –æ –ø—Ä–∏–±—ã–ª—è—Ö –∏ —É–±—ã—Ç–∫–∞—Ö")
        
        # Sample data or user data
        if st.session_state['uploaded_data'] is not None and 'Revenue' in st.session_state['uploaded_data'].columns:
            financial_data = st.session_state['uploaded_data']
        else:
            financial_data = generate_financial_data(start_date=date_range[0], periods=12)
        
        tab1, tab2 = st.tabs(["–ì—Ä–∞—Ñ–∏–∫–∏", "–î–∞–Ω–Ω—ã–µ"])
        
        with tab1:
            st.subheader("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ P&L")
            fig = px.bar(
                financial_data,
                x="Date",
                y=["Revenue", "Costs", "Profit"],
                barmode="group",
                title="–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã"
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # YoY comparison if we have data for multiple years
            if len(financial_data) > 13:
                st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ–¥ –∫ –≥–æ–¥—É")
                financial_data['Year'] = financial_data['Date'].dt.year
                financial_data['Month'] = financial_data['Date'].dt.month
                
                fig = px.line(
                    financial_data,
                    x="Month",
                    y="Profit",
                    color="Year",
                    title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –ø–æ –≥–æ–¥–∞–º",
                    labels={"Month": "–ú–µ—Å—è—Ü"}
                )
                st.plotly_chart(fig, use_container_width=True)
        
        with tab2:
            st.dataframe(financial_data)
            
            # Export option
            csv = financial_data.to_csv(index=False).encode('utf-8')
            st.download_button(
                "–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ CSV",
                csv,
                "financial_data.csv",
                "text/csv",
                key='download-csv'
            )
        
        # AI Analysis
        st.subheader("–ò–ò-–∞–Ω–∞–ª–∏–∑ P&L")
        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ P&L"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º P&L –¥–∞–Ω–Ω—ã–µ..."):
                analysis = analyze_financial_data(financial_data)
                st.session_state['analysis_results']['financial'] = analysis
        
        if 'financial' in st.session_state['analysis_results']:
            st.markdown(st.session_state['analysis_results']['financial']['summary'])
            if 'seasonality' in st.session_state['analysis_results']['financial']:
                st.markdown(st.session_state['analysis_results']['financial']['seasonality'])
            st.markdown(st.session_state['analysis_results']['financial']['recommendations'])
            
    elif page == "–Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞":
        st.title("–ê–Ω–∞–ª–∏–∑ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏")
        
        # Sample data or user data
        if st.session_state['uploaded_data'] is not None and 'Product' in st.session_state['uploaded_data'].columns:
            unit_data = st.session_state['uploaded_data']
        else:
            unit_data = generate_unit_economics()
        
        # Product selector
        products = unit_data["Product"].unique().tolist()
        selected_product = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", products)
        
        # Filter data
        product_data = unit_data[unit_data["Product"] == selected_product]
        
        # Display metrics
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric(label="–¶–µ–Ω–∞", value=f"{product_data['Price'].values[0]:.2f} {currency}")
        with col2:
            st.metric(label="–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å", value=f"{product_data['Cost'].values[0]:.2f} {currency}")
        with col3:
            st.metric(label="–ú–∞—Ä–∂–∞", value=f"{product_data['Margin'].values[0]:.2f} {currency}")
        with col4:
            st.metric(label="–ú–∞—Ä–∂–∞ %", value=f"{product_data['Margin %'].values[0]:.1f}%")
        
        # Charts
        st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
        fig = px.bar(
            unit_data, 
            x="Product", 
            y=["Price", "Cost", "Margin"],
            barmode="group", 
            title="–¶–µ–Ω–∞, —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –º–∞—Ä–∂–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º"
        )
        st.plotly_chart(fig, use_container_width=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            fig = px.pie(
                unit_data, 
                values="Total Revenue", 
                names="Product",
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º"
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            fig = px.scatter(
                unit_data,
                x="Volume",
                y="Margin %",
                size="Total Profit",
                color="Product",
                title="–ú–∞—Ä–∂–∞ % vs –û–±—ä–µ–º"
            )
            st.plotly_chart(fig, use_container_width=True)
        
        # Data table
        st.subheader("–î–∞–Ω–Ω—ã–µ –ø–æ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–µ")
        st.dataframe(unit_data)
        
        # AI Analysis
        st.subheader("–ò–ò-–∞–Ω–∞–ª–∏–∑ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏")
        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏..."):
                analysis = analyze_unit_economics(unit_data)
                st.session_state['analysis_results']['unit_economics'] = analysis
        
        if 'unit_economics' in st.session_state['analysis_results']:
            st.markdown(st.session_state['analysis_results']['unit_economics']['summary'])
            st.markdown(st.session_state['analysis_results']['unit_economics']['recommendations'])
    
    elif page == "–ü—Ä–æ–≥–Ω–æ–∑—ã":
        st.title("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")
        
        # Forecast parameters
        col1, col2, col3 = st.columns(3)
        with col1:
            base_revenue = st.number_input("–ë–∞–∑–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞", min_value=10000, value=100000, step=10000)
        with col2:
            growth_optimistic = st.slider("–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Ç–µ–º–ø —Ä–æ—Å—Ç–∞ (%)", min_value=5, max_value=30, value=15)
        with col3:
            growth_conservative = st.slider("–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–º–ø —Ä–æ—Å—Ç–∞ (%)", min_value=1, max_value=15, value=5)
        
        # Generate forecast data
        scenario_data = generate_scenarios(base_revenue=base_revenue)
        
        # Display forecasts
        st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º")
        fig = px.line(
            scenario_data,
            x="Date",
            y=["Conservative", "Base Case", "Optimistic"],
            title="–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º"
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Cumulative revenue
        st.subheader("–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞")
        cumulative_data = scenario_data.copy()
        for col in ["Conservative", "Base Case", "Optimistic"]:
            cumulative_data[f"{col} Cumulative"] = cumulative_data[col].cumsum()
        
        fig = px.line(
            cumulative_data,
            x="Date",
            y=["Conservative Cumulative", "Base Case Cumulative", "Optimistic Cumulative"],
            title="–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º"
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Data table
        st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        st.dataframe(scenario_data)
        
        # AI Analysis
        st.subheader("–ò–ò-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ..."):
                analysis = analyze_forecasts(scenario_data)
                st.session_state['analysis_results']['forecasts'] = analysis
        
        if 'forecasts' in st.session_state['analysis_results']:
            st.markdown(st.session_state['analysis_results']['forecasts']['summary'])
            st.markdown(st.session_state['analysis_results']['forecasts']['recommendations'])

# Footer
st.markdown("---")
st.caption("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é Streamlit")
